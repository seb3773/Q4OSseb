#!/bin/bash


export NEWT_COLORS='
root=,brown
window=,lightgray
border=white,lightgray
textbox=white,blue
button=black,white
actbutton=black,white
title=black,lightgray
'
#============================================================================
kernremove () {
while [ 1 ]
do

KERNLIST=$(dpkg --list | grep linux-image)
mapfile -t second_terms < <(echo "$KERNLIST" | awk '{print $2}')
options=()
curver=$(uname -r)
for term in "${second_terms[@]}"; do
if echo $term | grep -q $curver
then
tip="   [current kernel]"
else
tip=""
fi
  options+=("$term" "$tip")
done
choice=$(whiptail --title "-=- Q4OS Seb Scripts -=-" --menu "       Qtools Scripts - Cleaning/optimizing - remove kernel" 25 70 15 "${options[@]}" "«return" " <- return to previous menu" 3>&1 1>&2 2>&3)


case $choice in
"«return") return 1
;;
*)
clear
echo "Removing $choice"
sudo apt-get --purge remove $choice
sudo update-grub
sudo sed -i 's/echo/#ech~o/g' /boot/grub/grub.cfg
echo
echo Done.
read -p "Press enter..."
;;
esac

done

}

#============================================================================
sysclean () {
while [ 1 ]
do

choice=$(whiptail --title "-=- Q4OS Seb Scripts -=-" --menu " Qtools Scripts - Cleaning/optimizing - Clean buffers/cache/swap" 25 70 15 "»Clean" "start cleaning buffers/cache/swap" "«return" " <- return to previous menu" 3>&1 1>&2 2>&3)

case $choice in
"«return") return 1
;;
"»Clean") 
clear
echo "Cleaning buffers & cache..."
echo 3 | sudo tee -a /proc/sys/vm/drop_caches
echo "Cleaning swap..."
sudo swapoff -a
sleep 1
sudo swapon -a
echo "Cleaning packages..."
sudo apt clean
sudo apt autoremove -y
echo
echo Done.
read -p "Press enter..."
;;
esac


done

}

#============================================================================
trimssd () {
while [ 1 ]
do

choice=$(whiptail --title "-=- Q4OS Seb Scripts -=-" --menu "           Qtools Scripts - Cleaning/optimizing - Trim SSD" 25 70 15 "»Trim" "  [         start trimming ssd        ]" "«return" "  [     <- return to previous menu    ]" 3>&1 1>&2 2>&3)

case $choice in
"«return") return 1
;;
"»Trim") 
clear
echo "Trimming SSD, please wait..."
sudo fstrim -av
echo
echo Done.
read -p "Press enter..."
;;
esac


done

}

#============================================================================
langloc () {
while [ 1 ]
do

choice=$(whiptail --title "-=- Q4OS Seb Scripts -=-" --menu " Qtools Scripts - Cleaning/optimizing - remove localisation files" 25 70 15 " Remove" "  [  remove unused localisation files ]" " return" "  [     <- return to previous menu    ]" 3>&1 1>&2 2>&3)

case $choice in
" return") return 1
;;
" Remove") 
clear
isbleach=0
if ! apt -o "Apt::Cmd::Disable-Script-Warning=1" -qq list bleachbit | grep -q " \[install"
then
echo "Bleachbit is needed for this. Do you want to install it ?"
optionz=("Install Bleachbit" "Skip")
select optz in "${optionz[@]}"
do
    case $optz in
        "Install Bleachbit")
            sudo apt install -y bleachbit
            if ! apt -o "Apt::Cmd::Disable-Script-Warning=1" -qq list bleachbit | grep -q " \[install"
            then
            echo "Something wrong happened, bleachbit not installed.exiting."
            isbleach=0
            else
            isbleach=1
            fi
            break
            ;;
        "Skip")
            break
            ;;
        *) echo "invalid option $REPLY";;
    esac
done
else
isbleach=1
fi

if [ $isbleach -eq 1 ]; then

#show possible gains
bleachbit --preview system.localizations | grep " : "
echo
echo "Do you want to proceed ?"
optionz=("Proceed" "Cancel")
select optz in "${optionz[@]}"
do
    case $optz in
        "Proceed")
            sudo bleachbit --clean system.localizations | grep " : "
            read -p "Press enter..."
            break
            ;;
        "Cancel")
            break
            ;;
        *) echo "invalid option $REPLY";;
    esac
done
return 1
else

read -p "Press enter..."
return 1

fi



;;
esac


done

}


#============================================================================
removicons () {
if [ ! -e "/etc/q4ossebtheme" ]; then
clear
echo "   This script is designed to remove all icons"
echo "   except those used by the q4osSeb theme, you"
echo "   need to run the Qtheme script first before using it."
read -p "Press enter..."
return 1
fi

choice=$(whiptail --title "-=- Q4OS Seb Scripts -=-" --menu "    Qtools Scripts - Cleaning/optimizing - Remove unused icons " 25 70 15 "»Remove icons" "  [    start removing unused icons    ]" "«return" "  [     <- return to previous menu    ]" 3>&1 1>&2 2>&3)

case $choice in
"«return") return 1
;;
"»Remove icons") 
clear
now=$(date +"%Y-%m-%d_%I-%M%p")
source_path="/usr/share/icons"
arkname="Icons_archive_$now.tar.gz"
excluded_folders=("kdeten_dark" "kdeten_light" "Windows10Light" "Windows10Dark" "default" "hicolor" "vendor")
echo
echo -e "\033[0;31m░░▒▒▓▓██\033[0m Backup icons...\033[0m"
sudo tar --exclude="${excluded_folders[0]}" --exclude="${excluded_folders[1]}" --exclude="${excluded_folders[2]}" --exclude="${excluded_folders[3]}" --exclude="${excluded_folders[4]}" --exclude="${excluded_folders[5]}" --exclude="${excluded_folders[6]}" -zcvf "backups/$arkname" -C "$(dirname "$source_path")" "$(basename "$source_path")" > /dev/null 2>&1

if [ $? -eq 0 ]; then
    echo "Icons archive created : $arkname"
folders_todelete=$(find "$source_path" -mindepth 1 -maxdepth 1 -type d | grep -vE "$(IFS="|"; echo "${excluded_folders[*]}")")

if [ -n "$folders_todelete" ]; then
    sudo rm -rf $folders_todelete
    echo "Folders deleted."
    echo
    echo Done.
else
    echo "No folder to delete"
    echo
fi
read -p "Press enter..."
return 1

else
    echo "Error during icons archive creation :-("
    read -p "Press enter..."
    return 1
fi

;;
esac
}
#============================================================================
removfonts () {

while [ 1 ]
do

choice=$(whiptail --title "-=- Q4OS Seb Scripts -=-" --menu "  Qtools Scripts - Cleaning/optimizing - Remove non western fonts" 25 70 15 "»Remove" "  [        start removing fonts       ]" "«return" "  [     <- return to previous menu    ]" 3>&1 1>&2 2>&3)

case $choice in
"«return") return 1
;;
"»Remove") 
clear
now=$(date +"%Y-%m-%d_%I-%M%p")
source_path1="noto"
source_path2="droid"
backup_path="backups"
arkname="Fonts_archive_$now.tar.gz"

echo
echo -e "\033[0;31m░░▒▒▓▓██\033[0m Backup fonts...\033[0m"
sudo tar -zcvf "$backup_path/$arkname" -C "/usr/share/fonts/truetype" "$source_path1" "$source_path2" > /dev/null 2>&1


if [ $? -eq 0 ]; then
    echo "Fonts archive created : $arkname"
echo
echo "Removing fonts please wait..."
find /usr/share/fonts/truetype/noto/ -type f -name '*.ttf' \( -not -name 'NotoSerif-*' -a -not -name 'NotoColorEmoji.ttf' -a -not -name 'NotoSans-*' -a -not -name 'NotoSansMono-*' -a -not -name 'NotoSerifDisplay-*' -a -not -name 'NotoMono-Regular.ttf' -a -not -name 'NotoMusic-Regular.ttf' \) -exec sudo rm -f {} \;
find /usr/share/fonts/truetype/droid/ -type f -name '*.ttf' \( -not -name 'DroidSerif-*' -a -not -name 'DroidSans.ttf' -a -not -name 'DroidSans-*' -a -not -name 'DroidSansMono.ttf' \) -exec sudo rm -f {} \;
echo Done.
read -p "Press enter..."
return 1

else
    echo "Error during fonts archive creation :-("
    read -p "Press enter..."
    return 1
fi

;;
esac


done
#remove non western fonts
#backup


}
#============================================================================
#============================= MAIN =========================================
while [ 1 ]
do
ret=$(TERM=ansi whiptail --title "-=- Q4OS Seb Scripts -=-" --menu "               Qtools Scripts - Cleaning/optimizing" 25 70 15 "»Cleaning" "   [       script to clean system     ]" "»Kernel remove" "   [       remove unused kernels      ]" "»Trim SSD" "   [erase data blocks no longer in use]" "»Remove localisations" "   [ remove unused localisation files ]" "»Remove icons" "   [        remove unused icons       ]"  "»Remove fonts" "   [   remove some non western fonts  ]" "«exit" "   [         <- quit this menu        ]" 3>&1 1>&2 2>&3)

echo
case $ret in
"»Cleaning")   
	sysclean
;;
"»Kernel remove")   
        kernremove
;;
"»Trim SSD")   
        trimssd
;;
"»Remove localisations")   
        langloc
;;
"»Remove icons")   
        removicons
;;
"»Remove fonts")   
        removfonts
;;
"«exit") exit
;;
esac
done

